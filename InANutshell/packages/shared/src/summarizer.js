// AI summarization utilities
class Summarizer {
  constructor(apiKey = null) {
    this.apiKey = apiKey || process.env.GEMINI_API_KEY;
    this.geminiEndpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
  }

  async summarize(transcript, options = {}) {
    if (!this.apiKey) {
      throw new Error('Gemini API key required for summarization');
    }

    const prompt = this.buildPrompt(transcript, options);
    
    console.log('=== SENDING TO GEMINI API ===');
    console.log('Endpoint:', this.geminiEndpoint);
    console.log('Prompt length:', prompt.length);
    console.log('Prompt preview:', prompt.substring(0, 300) + '...');
    console.log('Full prompt:', prompt);
    console.log('=============================');
    
    try {
      const response = await fetch(`${this.geminiEndpoint}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const summary = data.candidates[0]?.content?.parts[0]?.text;
      
      if (!summary) {
        throw new Error('No summary generated by Gemini');
      }

      return summary;
    } catch (error) {
      console.error('Summarization failed:', error);
      throw new Error(`Failed to summarize: ${error.message}`);
    }
  }

  buildPrompt(transcript, options = {}) {
    const maxLength = options.maxLength || 'concise';
    const style = options.style || 'bullet points';
    
    return `Please summarize this YouTube video transcript in ${maxLength} ${style}. Focus on the main points and key takeaways:

${transcript}

Summary:`;
  }

  formatSummary(summary) {
    // Format summary for display in mobile/extension
    return {
      shortSummary: summary.slice(0, 200) + '...',
      fullSummary: summary,
      keyPoints: this.extractKeyPoints(summary)
    };
  }

  extractKeyPoints(text) {
    // Extract bullet points from summary
    return [];
  }
}

export default Summarizer;